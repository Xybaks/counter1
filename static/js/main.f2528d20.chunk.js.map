{"version":3,"sources":["Display/Display.module.css","EnterDisplay/EnterDisplay.module.css","EnterDisplay/NumberInput/NumberInput.module.css","Button/Button.module.css","Header/Header.module.css","Button/Button.tsx","Display/OnDisplayValue/OnDisplayValue.tsx","Display/Display.tsx","EnterDisplay/NumberInput/NumberInput.tsx","EnterDisplay/EnterDisplay.tsx","Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","onClick","onClickHandler","disabled","buttonName","OnDisplayValue","valuesEntered","valueDisplay","presentCount","maxCount","red","Display","display","error","setPresentCountCallback","incReset","setInitialValue","resetDisabled","NumberInput","allNumberInput","title","inputError","input","type","value","onChange","e","currentTarget","onChangeHandler","Number","EnterDisplay","maxCountError","minCount","setMaxCountCallback","setMinCountCallback","buttonBackSide","setCounts","setDisabled","Header","useState","localStorage","getItem","setMinCount","setMaxCount","setPresentCount","setValuesEntered","setError","displays","_minCount","_maxCount","setItem","toString","MAX_SAFE_INTEGER","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2528d20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3N_p9\",\"valueDisplay\":\"Display_valueDisplay__2fby0\",\"button\":\"Display_button__2V3Cz\",\"red\":\"Display_red__3KHR0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"EnterDisplay_display__uhukD\",\"valueDisplay\":\"EnterDisplay_valueDisplay__3kbjQ\",\"button\":\"EnterDisplay_button__1SMKH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allNumberInput\":\"NumberInput_allNumberInput__ujnjP\",\"input\":\"NumberInput_input__9LTa7\",\"inputError\":\"NumberInput_inputError__1kg55\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2PYTu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displays\":\"Header_displays__3YQTu\"};","import s from \"./Button.module.css\"\r\nimport React from \"react\";\r\n\r\ntype ButtonType ={\r\n    buttonName:string\r\n    onClickHandler: ()=>void\r\n    disabled?:boolean;\r\n    minCountGet?: number\r\n    maxCountGet?: number\r\n}\r\n\r\n\r\nexport const Button: React.FC<ButtonType> = (props)=>{\r\n    return(\r\n        <div>\r\n       <button className={s.button} onClick={props.onClickHandler} disabled={props.disabled}>{props.buttonName} </button>\r\n        </div>\r\n    )\r\n}","import s from \"../Display.module.css\";\r\nimport React from \"react\";\r\n\r\ntype OnDisplayValueType = {\r\n    presentCount: number\r\n    maxCount: number\r\n    valuesEntered: boolean\r\n}\r\n\r\n\r\nexport function OnDisplayValue(props: OnDisplayValueType) {\r\n    return (\r\n        props.valuesEntered\r\n            ? <div className={s.valueDisplay}> Enter values and press \"Set\" </div>\r\n            : (props.presentCount === props.maxCount)\r\n            ? <div className={s.valueDisplay}><h2 className={s.red}> {props.presentCount}</h2></div>\r\n            : <div className={s.valueDisplay}> {props.presentCount} </div>\r\n    )\r\n}","import s from \"./Display.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport {OnDisplayValue} from \"./OnDisplayValue/OnDisplayValue\";\r\n\r\ntype DisplayType = {\r\n    error: boolean\r\n    maxCount: number\r\n    incReset: boolean\r\n    presentCount: number\r\n    resetDisabled: boolean\r\n    valuesEntered: boolean\r\n    setPresentCountCallback: (presentCount: number) => void\r\n    setInitialValue: () => void\r\n}\r\n\r\n// другой вариант записи пропсов\r\nexport const Display: React.FC<DisplayType> = (props) => {\r\n\r\n    const setPresentCountCallback = () => {\r\n        props.setPresentCountCallback(props.presentCount)\r\n    }\r\n\r\n    const setInitialValue = () => {\r\n        props.setInitialValue()\r\n    }\r\n\r\n    return (\r\n        <div className={s.display}>\r\n            {props.error\r\n                ? <div className={s.valueDisplay}><h3 className={s.red}> Incorrect Value</h3></div>\r\n                : <OnDisplayValue\r\n                    presentCount={props.presentCount}\r\n                    maxCount={props.maxCount}\r\n                    valuesEntered={props.valuesEntered}\r\n                />}\r\n\r\n            <div className={s.button}>\r\n                <Button buttonName=\"Inc\"\r\n                        onClickHandler={setPresentCountCallback}\r\n                        disabled={props.incReset}/>\r\n                <Button buttonName=\"reset\"\r\n                        onClickHandler={setInitialValue}\r\n                        disabled={props.resetDisabled}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./NumberInput.module.css\";\r\ntype NumberInputType = {\r\n    title: string\r\n    value: number\r\n    error:boolean\r\n    onChangeHandler: (value: number) => void\r\n}\r\nexport const NumberInput = (props: NumberInputType) => {\r\n    const setMaxCount = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget) {\r\n            props.onChangeHandler(Number(e.currentTarget.value))\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.allNumberInput}>\r\n            <div> {props.title}</div>\r\n            <input className={props.error?s.inputError:s.input}\r\n                type=\"number\"\r\n                value={props.value}\r\n                onChange={setMaxCount}/>\r\n        </div>\r\n    )\r\n}","import s from \"./EnterDisplay.module.css\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {NumberInput} from \"./NumberInput/NumberInput\";\r\n\r\n\r\n\r\ntype EnterDisplayType = {\r\n    error: boolean\r\n    minCount: number\r\n    maxCount: number\r\n    presentCount: number\r\n    setDisabled: boolean\r\n    valuesEntered: boolean\r\n    setMinCountCallback: (minCount: number) => void\r\n    setMaxCountCallback: (maxCount: number) => void\r\n    setCounts: (minCount: number, maxCount: number) => void\r\n}\r\n\r\nexport const EnterDisplay: React.FC<EnterDisplayType> = (props) => {\r\n// переменная ошибки максимального числа, &&props.minCount>-1 чтобы не загоралась ошибка на махCount\r\n    // при увеличении minCount\r\n    let maxCountError=props.error&&props.minCount>-1\r\n    // handler нажатия на кнопку SET\r\n    const setCounts = () => {\r\n        props.setCounts(props.minCount, props.maxCount)\r\n    }\r\n\r\n    return (\r\n        <div className={s.display}>\r\n            <div className={s.valueDisplay}>\r\n                <NumberInput\r\n                    title=\"max value\"\r\n                    error={maxCountError}\r\n                    value={props.maxCount}\r\n                    onChangeHandler={props.setMaxCountCallback}/>\r\n                <NumberInput\r\n                    error={props.error}\r\n                    title=\"min value\"\r\n                    value={props.minCount}\r\n                    onChangeHandler={props.setMinCountCallback}/>\r\n            </div>\r\n            <div className={s.buttonBackSide}>\r\n            <div className={s.button} >\r\n                <Button\r\n                    buttonName=\"set\"\r\n                    onClickHandler={setCounts}\r\n                    disabled={props.setDisabled}/>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Display} from \"../Display/Display\";\r\nimport s from \"./Header.module.css\";\r\nimport {EnterDisplay} from \"../EnterDisplay/EnterDisplay\";\r\nimport React, {useState} from \"react\";\r\n\r\nexport const Header = () => {\r\n    // создаем переменные минимального, максимального и текущего значения, используем useState\r\n    const [minCount, setMinCount] = useState<number>((Number(localStorage.getItem(\"minCount\"))))\r\n    const [maxCount, setMaxCount] = useState<number>(Number(localStorage.getItem(\"maxCount\")))\r\n    const [presentCount, setPresentCount] = useState<number>(minCount)\r\n    // переменная , отвечающая, данные введены и нажат SET\r\n    const [valuesEntered, setValuesEntered] = useState<boolean>(false)\r\n    // переменная ошибки ввода\r\n    const [error, setError] = useState<boolean>(false)\r\n    //переменная дективации кнопки SET\r\n    let setDisabled = true\r\n    if (valuesEntered && !error) {\r\n        setDisabled = false\r\n    }\r\n// переменная деактивации кнопки Reset\r\n    let resetDisabled = false\r\n    if (error ||valuesEntered) {\r\n        resetDisabled = true\r\n    }\r\n// переменная деактивации кнопки Inc\r\n    let incReset:boolean=false\r\n    if (error||valuesEntered || maxCount===presentCount){\r\n        incReset=true\r\n    }\r\n    //  функция изменения минимального значения\r\n    const setMinCountCallback = (minCount: number) => {\r\n        if (minCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n            minCount % 1 !== 0 ||   //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n            minCount < 0 || // проверка на то, что число больше нуля\r\n            minCount >= maxCount) {  // проверка на то, что   введенное число число меньше _maxCount\r\n            setError(true)\r\n            setMinCount(minCount)\r\n        } else {\r\n            setError(false)\r\n            setMinCount(minCount)\r\n            setValuesEntered(true)\r\n        }\r\n    }\r\n    //  функция изменения максимального значения\r\n    const setMaxCountCallback = (maxCount: number) => {\r\n        if (maxCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n            maxCount % 1 !== 0 || //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n            maxCount < 0 || // проверка на то, что число больше нуля\r\n            maxCount <= minCount  // проверка на то, что   введенное число число больше _mimCount\r\n        ) {\r\n            setError(true)\r\n            setMaxCount(maxCount)\r\n        } else {\r\n            setError(false)\r\n            setMaxCount(maxCount)\r\n            setPresentCount(minCount)\r\n            setValuesEntered(true)\r\n        }\r\n    }\r\n    //  функция изменения текущего значения\r\n    const setPresentCountCallback = (presentCount: number) => {\r\n        if (presentCount > Number.MAX_SAFE_INTEGER ||  //  проверка на   самое большое целое число JS\r\n            presentCount % 1 !== 0 || //проверка на то, что число целое ( можно было сделать через Number.isInteger(число))\r\n            presentCount < 0 || // проверка на то, что число больше нуля\r\n            presentCount < minCount || // проверка на то, что   введенное число число больше _mimCount\r\n            presentCount > maxCount\r\n        ) {\r\n            setPresentCount(minCount)\r\n        } else if (presentCount === maxCount - 1) {\r\n            setPresentCount(presentCount + 1)\r\n        } else\r\n            setPresentCount(presentCount + 1)\r\n    }\r\n// функция установки начального значения счетчика на минимальное\r\n    const setInitialValue = () => {\r\n        setPresentCount(minCount)\r\n        setValuesEntered(false)\r\n    }\r\n// функция установки мин/макс значения в локалсторедж\r\n    const setCounts = (_minCount: number, _maxCount: number) => {\r\n        localStorage.setItem(\"minCount\", _minCount.toString())\r\n        localStorage.setItem(\"maxCount\", _maxCount.toString())\r\n        setInitialValue()\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1> Counter v1: with 2 displays</h1>\r\n            <div className={s.displays}>\r\n                <EnterDisplay\r\n                    error={error}\r\n                    minCount={minCount}\r\n                    maxCount={maxCount}\r\n                    setCounts={setCounts}\r\n                    setDisabled={setDisabled}\r\n                    presentCount={presentCount}\r\n                    valuesEntered={valuesEntered}\r\n                    setMinCountCallback={setMinCountCallback}\r\n                    setMaxCountCallback={setMaxCountCallback}\r\n                />\r\n                <Display\r\n                    error={error}\r\n                    maxCount={maxCount}\r\n                    incReset={incReset}\r\n                    presentCount={presentCount}\r\n                    resetDisabled={resetDisabled}\r\n                    valuesEntered={valuesEntered}\r\n                    setInitialValue={setInitialValue}\r\n                    setPresentCountCallback={setPresentCountCallback}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Header} from \"./Header/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <Header/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}